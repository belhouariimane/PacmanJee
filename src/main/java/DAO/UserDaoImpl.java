package DAO;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import beans.User;

public class UserDaoImpl implements UserDao {
	 private DAOFactory daoFactory;
	 private static final String SQL_CREATE = "CREATE TABLE IF NOT EXISTS "
	    		+ USERTABLE 		+ "("
	    		+ COLUMN_ID			+ " INTEGER NOT NULL PRIMARY KEY, "
	    		+ COLUMN_PSEUDO		+ " TEXT NOT NULL, "
	    		+ COLUMN_EMAIL		+ " TEXT NOT NULL, "
	    		+ COLUMN_PWD	+ " TEXT NOT NULL, "
	    		+ COLUMN_BIRTH	+ " TIMESTAMP NOT NULL,"
	 			+ COLUMN_PIC + "BLOB,"
	 			+ COLUMN_INSC + "TIMESTAMP NOT NULL)";
	 private static final String SQL_INSERT = "INSERT INTO "
	    		+ USERTABLE 		+ "("
	    		+ COLUMN_EMAIL 		+ ", "
	    		+ COLUMN_PWD 	+ ", "
	    		+ COLUMN_PSEUDO		+ ", "
	    		+ COLUMN_BIRTH	+ ","
	    		+ COLUMN_PIC + ","
	    		+ COLUMN_INSC  +") VALUES(?, ?, ?,?, ?, CURRENT_TIMESTAMP)";
	 private static final String SQL_SELECT = "SELECT "
	    		+ COLUMN_ID 		+ ", "
	    		+ COLUMN_EMAIL 		+ ", "
	    		+ COLUMN_PWD 	+ ", "
	    		+ COLUMN_PSEUDO		+ ", "
	    		+ COLUMN_BIRTH	+ ", "
	    		+ COLUMN_PIC + ", "
	    		+ COLUMN_INSC + " FROM "
	    		+ USERTABLE		+ " WHERE "
	    		+ COLUMN_PSEUDO		+ " = ? OR "
	    	    + COLUMN_EMAIL		+ " = ?";
	 private static final String SQL_DELETE = "DELETE FROM "
	    		+ USERTABLE		+ " WHERE "
	    		+ COLUMN_PSEUDO		+ " = ? OR "
	    	    + COLUMN_EMAIL		+ " = ?";
	 private static final String SQL_UPDATE_PSEUDO = "UPDATE "
				+ USERTABLE		+ " "
			    + COLUMN_ID			+ " = ? WHERE "
				+ COLUMN_PSEUDO		+ " = ?";
	private static final String SQL_UPDATE_EMAIL = "UPDATE "
				+ USERTABLE		+ " "
				+ COLUMN_ID			+ " = ? WHERE "
				+ COLUMN_EMAIL		+ " = ?";
	private static final String SQL_UPDATE_PASSWORD = "UPDATE "
				+ USERTABLE		+ " "
				+ COLUMN_ID			+ " = ? WHERE "
				+ COLUMN_PWD	+ " = ?";
	private static final String SQL_UPDATE_PIC = "UPDATE"
				+ USERTABLE + " " 
				+ COLUMN_ID			+ " = ? WHERE "
				+ COLUMN_PIC	+ " = ?";
	
	public  UserDaoImpl(DAOFactory factory) {
		this.daoFactory = factory;
		Connection connexion = null;
	    PreparedStatement preparedStatement = null;
	     
	     try {
		        connexion = daoFactory.getConnection();
		        preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_CREATE, false);
		        int statut = preparedStatement.executeUpdate();
		        if(statut != 0) {   /*The statement executed was a DDL statement if table created it returns 0.*/
		            throw new DAOException("Echec de la création de la table user.");
		        }
		 } catch(SQLException e) {
		        throw new DAOException(e);
		 } finally {
		        DAOUTILITY.fermeturesSilencieuses(preparedStatement, connexion);
		 }
	}
	@Override
	public void insert(User user) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connexion = daoFactory.getConnection();
			Object objets[] = { user.getEmail() , user.getPwd() , user.getPseudo() , user.getBirthday() ,user.getProfile() };
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_INSERT, true, objets);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec de la création de l'utilisateur , aucune ligne ajoutée dans la table.");
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if(autoGeneratedValues.next())
					user.setId(autoGeneratedValues.getLong(COLUMN_ID));
			else 
				throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
		
	}

	@Override
	public User find(String identifiant) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet resSet = null;
		User user = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_SELECT, false, identifiant);
			resSet = preparedStatement.executeQuery();
			if(resSet.next())
				user = map(resSet);
		}catch(SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUTILITY.fermeturesSilencieuses(resSet, preparedStatement, connexion);
		}
		return user;
	}
	@Override
	public void updatePwd(Long id, String newPwd) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_UPDATE_PASSWORD, true, id , newPwd);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec modication du mot de passe");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}
	@Override
	public void updatePic(Long id, Blob pic) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_UPDATE_PIC, true, id , pic);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec modication de la photo de profile");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}
	@Override
	public void updatePseudo(Long id, String pseudo) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_UPDATE_PSEUDO, true, id , pseudo);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec modication pseudo");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}
	@Override
	public void updateEmail(Long id, String email) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_UPDATE_EMAIL, true, id , email);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec modication email");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}
	@Override
	public void deleteAccount(String ident) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_DELETE, true, ident);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec suppression compte user");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}
	
	private static User map(ResultSet resultSet) throws SQLException {
		User user = new User();
		user.setId(resultSet.getLong(COLUMN_ID));
		user.setEmail(resultSet.getString(COLUMN_EMAIL));
		user.setPwd(resultSet.getString(COLUMN_PWD));
		user.setPseudo(resultSet.getString(COLUMN_PSEUDO));
		user.setBirthday(resultSet.getDate(COLUMN_BIRTH));
		user.setInscDate(resultSet.getTimestamp(COLUMN_INSC));
		user.setProfile(resultSet.getBlob(COLUMN_PIC));
		return user;
	}

}
